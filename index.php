<?php
	// Операторы и выражения
	/* 
	Этот урок более теоретический, особо кода писать не нужно, и так начнем:

	Операнд - То, над чем проводится действие(Допустим 4 + 3 где 4 и 3 это операнды)
	Оператор - То, что делает действие(Тот же самый пример 4 + 3 где + это оператор)
	Выражение - это то, что присваивается к значению слева, допустим:
		const NAME = "Yaroslav" . " " . "Shevchenko"
	В данном случае NAME это то, к чему присваивается выражение, которое идет после = , т.е "Yaroslav" . " " . "Shevchenko" это выражение
	так же:
		$var = 34;
	34 так же считается выражением.

	оператор = означает то, что он присваивает правый операнд к левому
		т.е $var = 34; означает то, что выражение 34 присваивается в операнд $var

	Есть еще операторы: +, -, *, /, **, %
		если  первые 4 знакомы... стоп! нужно кое что оговорить про деление
			деление - / всегда возвращает скалярный тип float, т.е число с плавающей точкой, все
		а вот ** это возведение в степень, т.е:
			$var = 3 ** 3 будет 21, потому что идет возведение в степень 3 в степень 3
		% - это остаток от деления, т.е если мы 10 % 3 то остаток будет 1, потому что 10 / 3 = 3, но останется 1

	Но давайте будем честны, иногда нам нужно переменной что-то добавить, т.е это выглядить будет так:
		$var = $var + 3; // мы $var складываем с 3
		И если честно, это неудобно, проще написать вот так:
			$var += 3; будет так же, что и $var = $var + 3.
		всего вот столько операторов:
			+=, -=, *=, **=, /=, %=, .=
			Объяснять не надо, что они будут делать и по какому принтсипу работают
			но .= делает конкатенатсию в строках, допустим:
				// конкатенатсия это соедение строк с помощью оператора .
				$var = "Ярослав";
				echo $var; // выведет "Ярослав"
				$var .= " Шевченко.";
				echo $var; // выведет "Ярослав Шевченко."
				// да, конкатенатсия соеденяет строки, и она так же может выступать как оператор
		
		Так же есть оператор @, который будет игнорировать ошибку в коде:
			$var = @$d + 3;
			echo $var;
		будет просто вывод 3, но если убрать @ то будет выведена ошибка: 
			$var = @$d + 3;
			echo $var;

		Иногда в программировании нужно увеличить переменную на 1 или уменьшить ее
		и можно записать вот так:
			$var += 1;
			$var -= 1;
			
		но программисты создали спетсиальный оператор, который называется декремент(++) и инкремент(--)
			как написать? вот так:
			$var++; // $var увеличивается на 1
			$var--; // $var уменьшается на 1
			так же есть и постфиксная форма
			++$var;
			--$var;
			если $var++ и $var-- (префиксная форма) сначала возвращает значение а потом увеличивает число на еденитсу
				то --$var и ++$var (постфиксная форма) сначала увеличивает число на еденитсу а потом возвращает значение
			
			так же про логику, есть логические операторы:
			! - НЕ (если значение была истинной, то она станет ложью, т.е если $var = true то станет false)
			and, && - оба оператора означают И ($var = true && true означает то, что $var равен истине И истине)
			or, || - оба оператора означают ИЛИ ($var = true or false означает то, что $var равен истине ИЛИ ложью)
				сейчас возможно не понятно , зачем это нужно, но скоро мы начнем понимать что это. 

			Так же, касаемо логики, представим что $a = 30;
				а теперь сделаем так: $b = -$a;
				echo $b // что выведет на экран? Правильно, -30!
				да, так же можно инвертировать значение выражений
			*/

			$var = -(34 - 3499 + 94 * 3 - 104 + 3000);
			// кстати, почему я не соеденил ! и -, как вы думаете?
			// а потому что ! работает только с истинной или ложью, а - может работать со значениями
			echo $var;